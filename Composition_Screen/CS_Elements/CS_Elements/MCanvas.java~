package  Composition_Screen.CS_Elements;

import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;

import javax.swing.*;

import java.util.ArrayList;

import player.*;

public class MCanvas extends JPanel
{
    
    Channels channels;
    
    Color color;
    int height;
    int width;
    
    int xShift;
    int yShift; 
    
    int xScale;
    int yScale;
    
    ArrayList<NoteButton> notes;
    NoteButton newNote;    
    int x, y;    
    boolean left, right;
    
    MCanvas canvas;    
    TimeDraw timeDraw;    
    int time;
    
    public MCanvas( int xScale, int yScale, Channels channels)
    {
        color = new Color(250, 250, 250);
        this.setBackground( color );
        this.xScale = xScale;
        this.yScale = yScale;
        this.channels = channels;
        timeDraw = new TimeDraw();
        notes = new ArrayList<NoteButton>();
        click c = new click();
        addMouseListener(c);
        addMouseMotionListener(c);        
        canvas = this;
    }
    
    @Override
    public void paintComponent(Graphics g)
    {
        super.paintComponent(g);     
        this.setBackground( color);
        height = this.getSize().height;
        width = this.getSize().width;
        
        // Horizontal Lines
        g.setColor( new Color( 230, 230, 230));
        
        int b = (7*yScale)/12;
        for ( int i = 0; i*xScale + yShift < height; i++)
        {
            g.fillRect( 0, yShift + i*yScale + 1 , width, 2);
            
        }
        
        // Horizontal Keys
        for ( int i = 0; i* (7 * yScale/12) + yShift < height; i++)
        {
            g.fillRect( 0, yShift + (1*7*yScale)/12 + i * yScale * 7, width, b);
            g.fillRect( 0, yShift + (3*7*yScale)/12 + i * yScale * 7, width, b);
            g.fillRect( 0, yShift + (5*7*yScale)/12 + i * yScale * 7, width, b);
            
            g.fillRect( 0, yShift + (8*7*yScale)/12 + i * yScale * 7, width, b);
            g.fillRect( 0, yShift + (10*7*yScale)/12 + i * yScale * 7, width, b);
            
        }  
        
        g.setColor( new Color(100,100,100));
        for ( int i = 1; i * xScale + xShift < width; i++)
            g.fillRect( xShift + i*xScale, 0, 2, height);
        
        g.setColor( new Color(0,0,0));
        for ( int i = 1; i * xScale * 4 + xShift < width; i++)
        {
            g.fillRect( xShift + i*xScale*4, 0, 2, height);
        }    
        
        g.setColor( new Color(50,50,250));
        if (newNote != null)
        {
            g.fillRect( xShift + xScale * newNote.start, yShift + (yScale * newNote.note * 7 )/ 12, xScale * newNote.length, 7*yScale/12);
            g.setColor( new Color(0,0,10));
            g.drawRect( xShift + xScale * newNote.start, yShift + (yScale * newNote.note * 7 )/ 12, xScale * newNote.length, 7*yScale/12);
            g.drawRect( xShift + xScale * newNote.start + 1, yShift + (yScale * newNote.note * 7 )/ 12 + 1, xScale * newNote.length - 2, 7*yScale/12 - 2);
        }
        
        
        for ( int i = 0; i < notes.size(); i++)
        {
            if (notes.get(i).selected)
                g.setColor( new Color(0,250,0));
            else
                g.setColor( new Color(250,0,0));
            
            g.fillRect( xShift + xScale * notes.get(i).start, yShift + (yScale * notes.get(i).note * 7) / 12, xScale * notes.get(i).length, 7*yScale/12);
            g.setColor( new Color(0,0,10));
            g.drawRect( xShift + xScale * notes.get(i).start, yShift + (yScale * notes.get(i).note * 7) / 12 , xScale * notes.get(i).length , 7*yScale/12 );            
            g.drawRect( xShift + xScale * notes.get(i).start + 1, yShift + (yScale * notes.get(i).note * 7) / 12 + 1, xScale * notes.get(i).length - 2, 7*yScale/12 - 2);
        }
        g.setColor( new Color(0,250,0));
        for(int i = 0; i < notes.size(); i++)
        {
            notes.get(i).resetBounds();
        }
        
    }
    
    public void setXShift( int xShift)
    {
        this.xShift = xShift;
    }
    
    public void setYShift( int yShift)
    {
        this.yShift = yShift;
    }
    
    public void setXScale( int xShift)
    {
        this.xScale = xScale;
    }
    
    public void setYScale( int yScale)
    {
        this.yScale = yScale;
    }
    
    public void setNoteData(ArrayList<Note> noteArray )
    {
        notes.clear();
        
        for(int i = 0; i < noteArray.size(); i++)
        {
            notes.add( new NoteButton(0,0,0,0) );
        }
        
        for(int i = 0; i < noteArray.size(); i++)
        {
            notes.get(i).note = noteArray.get(i).getKey();
            notes.get(i).start = noteArray.get(i).getTickInit();
            notes.get(i).length = noteArray.get(i).getTickEnd() - noteArray.get(i).getTickInit();
            notes.get(i).velocity = noteArray.get(i).getVelocity();
        }
    }
    
    public int[][] getNoteData()
    {
        int[][] data = new int[4][notes.size()];
        // loop into data
        return data;
        
    }
    
    public class NoteButton extends JButton
    {
        int note;
        int start;
        int length;
        int velocity;
        
        boolean selected;
        
        NoteButton dis;
        int oldNote;
        int oldStart;
        public NoteButton( int note, int start, int length, int velocity)
        {
            this.note = note;
            this.start = start;
            this.length = length;
            this.velocity = velocity;
            this.selected = false;
            this.setBounds( xShift + start * xScale, yShift + 7*note*yScale/12, xScale * length, 7*yScale/12);
            //this.setVisible(false);
            this.addMouseListener(new clickButton());
            this.addMouseMotionListener(new clickButton());
            
            this.setOpaque(false);
            this.setContentAreaFilled(false);
            this.setBorderPainted(false);
            this.dis = this;
        }
        
        public class clickButton implements MouseListener, MouseMotionListener
        {
            
            @Override
            public void mousePressed(MouseEvent e)
            {
                if (e.getButton() == MouseEvent.BUTTON1)
                {
                    oldNote = note;
                    oldStart = start;
                    selected = true;
                    canvas.repaint();
                    
                } 
            }
            
            @Override
            public void mouseReleased(MouseEvent e)
            {
                
                if (!isBlocked(dis))
                {
                    setBounds( start*xScale, 7*note*yScale/12, xScale * length, 7*yScale/12);   
                    channels.changeKey(new Note(channels.getChannel(), 137 - oldNote, velocity, oldStart, oldStart + length ), 137 - note);
                    
                    channels.changeDuration(new Note(channels.getChannel(), 137 - note, velocity, oldStart, oldStart + length ), start, start+ length );
                    
                }
                else
                {
                    start = oldStart;
                    note = oldNote;                    
                }
                selected = false;
                canvas.repaint();
                
                
            }
            
            @Override
            public void mouseClicked(MouseEvent event)
            {
                
            }
            
            @Override
            public void mouseDragged(MouseEvent e)
            {
                if (selected)
                {
                    start = (-xShift + e.getX() + getBounds().x)/xScale;
                    note = (12 * (-yShift + e.getY() + getBounds().y)/yScale)/7;
                    // System.out.println(start + " , " + note);
                    canvas.repaint();
                }
            }
            
            @Override
            public void mouseMoved(MouseEvent event)
            {
                
            }
            @Override
            public void mouseEntered(MouseEvent event) {
            }
            
            @Override
            public void mouseExited(MouseEvent event) {
            }
            
            public void resize()
            {
                
            }
        }
        
        public void resetBounds()
        {
            this.setBounds( xShift + start * xScale, yShift + 7*note*yScale/12, xScale * length, 7*yScale/12);
        }
    } 
    
    public class click implements MouseListener, MouseMotionListener
    {
        @Override
        public void mousePressed(MouseEvent e)
        {            
            if (e.getButton() == MouseEvent.BUTTON1)
            {
                left = true;
                x = (-xShift + e.getX())/xScale;
                y = (12 * (-yShift + e.getY())/yScale)/7;
                newNote = new NoteButton( y, x, 1, 100);
            }
            
            if (e.getButton() == MouseEvent.BUTTON3)
            {
                for (int i = 0; i < notes.size(); i++)
                {
                    notes.get(i).selected = false;
                }
            }            
            repaint();
        }
        
        public void mouseReleased(MouseEvent e)
        {
            if (e.getButton() == MouseEvent.BUTTON1)
            {
                if (!isBlocked(newNote))
                {
                    NoteButton note = new NoteButton( y, x, newNote.length, 100);
                    add(note);                    
                    notes.add(note);                    
                    channels.addNotes( 137 -  y, note.velocity, x, x + note.length );
                    
                }
                
                newNote = null;
                left = false;
            }        
            
            repaint();
        }
        
        @Override
        public void mouseDragged(MouseEvent e)
        {
            if (left)
            {
                if ((-xShift + e.getX())/xScale - x + 1 > 1)
                {
                    newNote.length = (-xShift + e.getX())/xScale - x + 1;
                }
                else
                {
                    newNote.length = 1;
                }
            }
            repaint();
            // System.out.println("[" + (-xShift + e.getX())/xScale + ", " +  + "]");
            
        }
        
        @Override
        public void mouseMoved(MouseEvent event)
        {
            
        }
        
        @Override
        public void mouseClicked(MouseEvent event) {
        }
        
        @Override
        public void mouseEntered(MouseEvent event) {
        }
        
        @Override
        public void mouseExited(MouseEvent event) {
        }
    }
    
    public boolean isBlocked(NoteButton n)
    {
        boolean blocked = false;
        
        for (int i = 0; i < notes.size(); i++)
        {
            if (  n.start + n.length > notes.get(i).start && n.start < notes.get(i).start + notes.get(i).length)
            {
                if ( n != notes.get(i) && n.note == notes.get(i).note)
                {
                    blocked = true;
                }
            }
        }
        return blocked;
    }    
    
    public void paintLine()
    {
        timeDraw.repaint();
    }   
    
    public class TimeDraw extends JPanel
    {
        public TimeDraw()
        {
            this.setBounds( -xShift + this.getBounds().x, 0, 2, height);
        }
        
        @Override
        public void paintComponent( Graphics g)
        {
            super.paintComponent(g);
            
            g.drawRect( xShift + time, 0, 2, height);       
        }
        
        public void resetBounds()
        {
            this.setBounds( -xShift + this.getBounds().x , 0, 2, height);
        }
    }
    
    public void setTime(int t)
    {
        this.time = t;
        timeDraw.resetBounds();
    } 
    
    public void setChannel(Channels c)
    {
        this.channels = c;
        setNoteData( c.setNoteData() );
    }
    
    public int getNoteSize()
    {
        return notes.size();
    }
    
}


